    //APPROACH -> USE PRIORITY QUEUE
    /*
        T.C = O(N*M) WHERE N IS THE SIZE OF QUERY AND M IS THE SIZE OF NUMS
        S.C = O(M)(FOR PRIORITY QUEUE)+O(N)(FOR ANSWER)
    */
    vector<int> smallestTrimmedNumbers(vector<string>& nums, vector<vector<int>>& queries) {
        vector<int>ans;
        for(auto it:queries)
        {
            int trimval = it[1];
            int kthsmallest = it[0];
            priority_queue<pair<string,int>>pq;
            for(int i=0;i<nums.size();i++)
            {
                 string x = nums[i];
                 int len = x.size();
                 string str = x.substr(len-trimval,trimval);
                 if(pq.size()<kthsmallest)
                 {
                     pq.push({str,i});
                 }
                 else
                 {
                     if(pq.top().first>str)
                     {
                         pq.pop();
                         pq.push({str,i});
                     }
                 }
            }
            int val = pq.top().second;
            ans.push_back(val);
        }
        return ans;
    }
